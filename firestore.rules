rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function authed() { return request.auth != null; }

    function isNonEmptyString(field, maxLen) {
      return field is string && field.size() >= 1 && field.size() <= maxLen;
    }

    function isString(field, maxLen) {
      return field is string && field.size() <= maxLen;
    }

    function isOptionalString(field, maxLen) {
      return field == null || isString(field, maxLen);
    }

    function isStringList(list, minLen, maxLen) {
      return list is list
        && list.size() == list.where(item, item is string && item.size() >= minLen && item.size() <= maxLen).size();
    }

    function isOptionalBoundedStringList(field, maxItems, maxLen) {
      return field == null
        || (field is list
          && field.size() <= maxItems
          && field.size() == field.where(item,
            item == null || (item is string && item.size() <= maxLen)
          ).size());
    }

    function isTimestamp(value) {
      return value is timestamp || value == request.time;
    }

    function isValidNoteBase(data) {
      return data.uid is string
        && isNonEmptyString(data.title, 100)
        && (!("content" in data) || isOptionalString(data.content, 60000))
        && (!("contentMarkdown" in data) || isOptionalString(data.contentMarkdown, 60000))
        && ("description" in data ? isOptionalString(data.description, 300) : true)
        && ("isFavorite" in data ? data.isFavorite is bool : true)
        && (!("category" in data)
            || data.category == null
            || isString(data.category, 100))
        && (!("tags" in data) || isOptionalBoundedStringList(data.tags, 500, 100))
        && (!("linkedCabinetIds" in data)
            || isOptionalBoundedStringList(data.linkedCabinetIds, 50, 100))
        && (!("linkedItemIds" in data)
            || isOptionalBoundedStringList(data.linkedItemIds, 50, 100));
    }

    function isValidNoteCreate(data) {
      return isValidNoteBase(data)
        && ("createdAt" in data)
        && ("updatedAt" in data)
        && isTimestamp(data.createdAt)
        && isTimestamp(data.updatedAt);
    }

    function isValidNoteUpdate(data) {
      return isValidNoteBase(data)
        && (!("createdAt" in data) || isTimestamp(data.createdAt))
        && (!("updatedAt" in data) || isTimestamp(data.updatedAt));
    }

    // 櫃子
    match /cabinet/{id} {
      allow read: if authed() && resource.data.uid == request.auth.uid;
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if authed() && resource.data.uid == request.auth.uid;
    }

    // 物件
    match /item/{id} {
      allow read: if authed() && resource.data.uid == request.auth.uid;
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if authed() && resource.data.uid == request.auth.uid;

      // 進度（不需要在子文件存 uid，改查父 item 的 uid）
      match /progress/{pid} {
        allow read, create, update, delete:
          if authed() &&
             get(/databases/$(database)/documents/item/$(id)).data.uid == request.auth.uid;
      }
    }

    // 垃圾桶
    match /cabinetTrash/{itemId} {
      allow read: if authed() && resource.data.uid == request.auth.uid;
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow update: if authed() &&
                     resource.data.uid == request.auth.uid &&
                     request.resource.data.uid == request.auth.uid;
      allow delete: if authed() && resource.data.uid == request.auth.uid;
    }

    // 標籤
    match /tag/{id} {
      allow read: if authed() && resource.data.uid == request.auth.uid;
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if authed() && resource.data.uid == request.auth.uid;
    }

    // 筆記本
    match /note/{id} {
      allow read: if authed() && resource.data.uid == request.auth.uid;
      allow create: if authed()
                    && request.resource.data.uid == request.auth.uid
                    && isValidNoteCreate(request.resource.data);
      allow update: if authed()
                    && resource.data.uid == request.auth.uid
                    && request.resource.data.uid == resource.data.uid
                    && isValidNoteUpdate(request.resource.data)
                    && (!("createdAt" in resource.data)
                        || (("createdAt" in request.resource.data)
                            && request.resource.data.createdAt == resource.data.createdAt));
      allow delete: if authed() && resource.data.uid == request.auth.uid;
    }

    // 使用者偏好
    match /user/{uid} {
      allow read, write: if authed() && request.auth.uid == uid;
    }
  }
}
